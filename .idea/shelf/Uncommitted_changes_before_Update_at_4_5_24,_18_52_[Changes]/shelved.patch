Index: src/main/java/EXPERIMENTO/MAIN.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package EXPERIMENTO;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.*;\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.Optional;\n\npublic class MAIN extends JFrame implements ActionListener {\n\n    public JTextField nombreField;\n    public JTextField inicioField;\n    public JTextField finField;\n    public JTextField cantidadField;\n    public JTextField temperaturaField;\n    public JComboBox<String> luminosidadCombo;\n    public JTextField comidaInicialField;\n    public JTextField diaIncrementoField;\n    public JTextField comidaIncrementoField;\n    public JTextField comidaFinalField;\n    public JTextArea detallesArea;\n    public JButton agregarCultivoButton;\n    public JButton eliminarCultivoButton;\n    public JButton verNombresButton;\n    public JButton verDetallesButton;\n    public JButton guardarButton;\n    public JButton guardarComoButton;\n    public JButton abrirButton;\n    public JLabel nombreLabel;\n    public JLabel inicioLabel;\n    public JLabel finLabel;\n    public JLabel cantidadLabel;\n    public JLabel temperaturaLabel;\n    public JLabel luminosidadLabel;\n    public JLabel comidaInicialLabel;\n    public JLabel diaIncrementoLabel;\n    public JLabel comidaIncrementoLabel;\n    public JLabel comidaFinalLabel;\n    public experimentos experimento;\n\n    public MAIN() {\n        setTitle(\"Experimento con bacterias\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(800, 600);\n        setLayout(new BorderLayout());\n\n        // Panel de información\n        JPanel informacionPanel = new JPanel();\n        informacionPanel.setLayout(new GridLayout(10, 2));\n        nombreLabel = new JLabel(\"Nombre: \");\n        inicioLabel = new JLabel(\"Fecha de inicio (YYYY-MM-DD): \");\n        finLabel = new JLabel(\"Fecha de fin (YYYY-MM-DD): \");\n        cantidadLabel = new JLabel(\"Cantidad inicial de bacterias: \");\n        temperaturaLabel = new JLabel(\"Temperatura: \");\n        luminosidadLabel = new JLabel(\"Luminosidad: \");\n        comidaInicialLabel = new JLabel(\"Comida inicial (día 1): \");\n        diaIncrementoLabel = new JLabel(\"Día de incremento de comida: \");\n        comidaIncrementoLabel = new JLabel(\"Comida en día de incremento: \");\n        comidaFinalLabel = new JLabel(\"Comida final (día 30): \");\n        nombreField = new JTextField();\n        inicioField = new JTextField();\n        finField = new JTextField();\n        cantidadField = new JTextField();\n        temperaturaField = new JTextField();\n        String[] luminosidades = {\"Alta\", \"Media\", \"Baja\"};\n        luminosidadCombo = new JComboBox<>(luminosidades);\n        comidaInicialField = new JTextField();\n        diaIncrementoField = new JTextField();\n        comidaIncrementoField = new JTextField();\n        comidaFinalField = new JTextField();\n        agregarCultivoButton = new JButton(\"Agregar cultivo\");\n        agregarCultivoButton.addActionListener(this);\n        eliminarCultivoButton = new JButton(\"Eliminar cultivo\");\n        eliminarCultivoButton.addActionListener(this);\n        verNombresButton = new JButton(\"Ver nombres de cultivos\");\n        verNombresButton.addActionListener(this);\n        verDetallesButton = new JButton(\"Ver detalles de cultivo\");\n        verDetallesButton.addActionListener(this);\n        informacionPanel.add(nombreLabel);\n        informacionPanel.add(nombreField);\n        informacionPanel.add(inicioLabel);\n        informacionPanel.add(inicioField);\n        informacionPanel.add(finLabel);\n        informacionPanel.add(finField);\n        informacionPanel.add(cantidadLabel);\n        informacionPanel.add(cantidadField);\n        informacionPanel.add(temperaturaLabel);\n        informacionPanel.add(temperaturaField);\n        informacionPanel.add(luminosidadLabel);\n        informacionPanel.add(luminosidadCombo);\n        informacionPanel.add(comidaInicialLabel);\n        informacionPanel.add(comidaInicialField);\n        informacionPanel.add(diaIncrementoLabel);\n        informacionPanel.add(diaIncrementoField);\n        informacionPanel.add(comidaIncrementoLabel);\n        informacionPanel.add(comidaIncrementoField);\n        informacionPanel.add(comidaFinalLabel);\n        informacionPanel.add(comidaFinalField);\n        informacionPanel.add(agregarCultivoButton);\n        informacionPanel.add(eliminarCultivoButton);\n        informacionPanel.add(verNombresButton);\n        informacionPanel.add(verDetallesButton);\n\n        // Panel de detalles\n        detallesArea = new JTextArea();\n        JScrollPane detallesScroll = new JScrollPane(detallesArea);\n\n        // Panel de botones de archivo\n        JPanel botonesArchivoPanel = new JPanel();\n        botonesArchivoPanel.setLayout(new GridLayout(1, 3));\n        guardarButton = new JButton(\"Guardar experimento\");\n        guardarButton.addActionListener(this);\n        guardarComoButton = new JButton(\"Guardar como\");\n        guardarComoButton.addActionListener(this);\n        abrirButton = new JButton(\"Abrir experimento\");\n        abrirButton.addActionListener(this);\n        botonesArchivoPanel.add(guardarButton);\n        botonesArchivoPanel.add(guardarComoButton);\n        botonesArchivoPanel.add(abrirButton);\n\n        // Agregar todos los paneles al JFrame\n        add(informacionPanel, BorderLayout.NORTH);\n        add(detallesScroll, BorderLayout.CENTER);\n        add(botonesArchivoPanel, BorderLayout.SOUTH);\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        try {\n            if (e.getSource() == agregarCultivoButton) {\n                if (!cantidadField.getText().isEmpty()) {\n                    agregarCultivoDeBacterias(nombreField.getText(),\n                            LocalDate.parse(inicioField.getText()),\n                            LocalDate.parse(finField.getText()),\n                            Integer.parseInt(cantidadField.getText()),\n                            Double.parseDouble(temperaturaField.getText()),\n                            luminosidadCombo.getSelectedItem().toString(),\n                            Integer.parseInt(comidaInicialField.getText()),\n                            Integer.parseInt(diaIncrementoField.getText()),\n                            Integer.parseInt(comidaIncrementoField.getText()),\n                            Integer.parseInt(comidaFinalField.getText()));\n                } else {\n                    detallesArea.append(\"Debe especificar una cantidad para agregar un cultivo de bacterias.\\n\");\n                }\n            } else if (e.getSource() == eliminarCultivoButton) {\n                eliminarCultivoDeBacterias(nombreField.getText());\n            } else if (e.getSource() == verNombresButton) {\n                verNombresDeCultivosDeBacterias();\n            } else if (e.getSource() == verDetallesButton) {\n                verInformacionDetalladaDeCultivoDeBacterias(nombreField.getText());\n            } else if (e.getSource() == guardarButton) {\n                guardarExperimento();\n            } else if (e.getSource() == guardarComoButton) {\n                guardarExperimentoComo();\n            } else if (e.getSource() == abrirButton) {\n                abrirExperimento();\n            }\n        } catch (IOException | ClassNotFoundException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public void abrirExperimento() throws IOException, ClassNotFoundException {\n        JFileChooser fileChooser = new JFileChooser();\n        int returnValue = fileChooser.showOpenDialog(this);\n        if (returnValue == JFileChooser.APPROVE_OPTION) {\n            File file = fileChooser.getSelectedFile();\n            setExperimento(experimentos.abrirExperimento(file.getAbsolutePath()));\n            detallesArea.append(\"Experimento cargado desde: \" + file.getAbsolutePath() + \"\\n\");\n        }\n    }\n\n    public void guardarExperimento() throws IOException {\n        String ruta = \"experimento.ser\";\n        guardarExperimento(ruta);\n    }\n\n    public void guardarExperimento(String ruta) throws IOException {\n        // Implementación del método para guardar el experimento en la ruta proporcionada\n    }\n\n    public void guardarExperimentoComo() throws IOException {\n        if (getExperimento() != null) {\n            JFileChooser fileChooser = new JFileChooser();\n            int returnValue = fileChooser.showSaveDialog(this);\n            if (returnValue == JFileChooser.APPROVE_OPTION) {\n                File file = fileChooser.getSelectedFile();\n                if (!file.getAbsolutePath().endsWith(\".ser\")) {\n                    file = new File(file.getAbsolutePath() + \".ser\");\n                }\n                getExperimento().guardarExperimento(file.getAbsolutePath());\n                detallesArea.append(\"Experimento guardado en: \" + file.getAbsolutePath() + \"\\n\");\n            }\n        } else {\n            detallesArea.append(\"No hay ningún experimento para guardar\\n\");\n        }\n    }\n\n    public void verInformacionDetalladaDeCultivoDeBacterias(String nombre) {\n        Optional<CultivoDeBacterias> cultivoOptional = getExperimento().obtenerDetallesCultivo(nombre);\n        if (cultivoOptional.isPresent()) {\n            CultivoDeBacterias cultivo = cultivoOptional.get();\n            detallesArea.append(\"Nombre: \" + cultivo.getNombre() + \"\\n\");\n            detallesArea.append(\"Fechas: \" + cultivo.getFechaInicio() + \" - \" + cultivo.getFechaFin() + \"\\n\");\n            detallesArea.append(\"Cantidad inicial: \" + cultivo.getCantidad() + \"\\n\");\n            detallesArea.append(\"Temperatura: \" + cultivo.getTemperatura() + \"\\n\");\n            detallesArea.append(\"Luminosidad: \" + cultivo.getLuminosidad() + \"\\n\");\n            detallesArea.append(\"Dosis de comida:\\n\");\n            detallesArea.append(\" - Inicial: \" + cultivo.getComidaInicial() + \"\\n\");\n            detallesArea.append(\" - Incremento en día \" + cultivo.getDiaIncremento() + \": \" +\n                    cultivo.getComidaIncremento() + \"\\n\");\n            detallesArea.append(\" - Final: \" + cultivo.getComidaFinal() + \"\\n\");\n        } else {\n            detallesArea.append(\"No se encontró el cultivo de bacterias: \" + nombre + \"\\n\");\n        }\n    }\n\n    public void verNombresDeCultivosDeBacterias() {\n        getExperimento().mostrarCultivosDeBacterias();\n    }\n\n    public void eliminarCultivoDeBacterias(String nombre) {\n        Optional<CultivoDeBacterias> cultivoOptional = getExperimento().obtenerDetallesCultivo(nombre);\n        if (cultivoOptional.isPresent()) {\n            getExperimento().eliminarCultivoDeBacterias(cultivoOptional.get());\n            detallesArea.append(\"Cultivo de bacterias eliminado: \" + nombre + \"\\n\");\n        } else {\n            detallesArea.append(\"No se encontró el cultivo de bacterias: \" + nombre + \"\\n\");\n        }\n    }\n\n    public void agregarCultivoDeBacterias(String nombre, LocalDate inicio, LocalDate fin, int cantidad,\n                                          double temperatura, String luminosidad, int comidaInicial,\n                                          int diaIncremento, int comidaIncremento, int comidaFinal) {\n        DosisComida dosisComida = new DosisComida(comidaInicial, diaIncremento, comidaIncremento, comidaFinal);\n        CultivoDeBacterias nuevoCultivo = new CultivoDeBacterias(nombre, inicio, fin, cantidad,\n                temperatura, luminosidad, dosisComida);\n        getExperimento().agregarCultivoDeBacterias(nuevoCultivo);\n        detallesArea.append(\"Cultivo de bacterias agregado: \" + nombre + \"\\n\");\n    }\n\n    public void setExperimento(experimentos experimento) {\n        this.experimento = experimento;\n    }\n\n    public experimentos getExperimento() {\n        if (experimento == null) {\n            experimento = new experimentos();\n        }\n        return this.experimento;\n    }\n\n    public static void main(String[] args) {\n        MAIN main = new MAIN();\n        main.setVisible(true);\n    }\n}\n\nclass DosisComida implements Serializable {\n    private int comidaInicial;\n    private int diaIncremento;\n    private int comidaIncremento;\n    private int comidaFinal;\n\n    public DosisComida(int comidaInicial, int diaIncremento, int comidaIncremento, int comidaFinal) {\n        this.comidaInicial = comidaInicial;\n        this.diaIncremento = diaIncremento;\n        this.comidaIncremento = comidaIncremento;\n        this.comidaFinal = comidaFinal;\n    }\n\n    public int getComidaInicial() {\n        return comidaInicial;\n    }\n\n    public void setComidaInicial(int comidaInicial) {\n        this.comidaInicial = comidaInicial;\n    }\n\n    public int getDiaIncremento() {\n        return diaIncremento;\n    }\n\n    public void setDiaIncremento(int diaIncremento) {\n        this.diaIncremento = diaIncremento;\n    }\n\n    public int getComidaIncremento() {\n        return comidaIncremento;\n    }\n\n    public void setComidaIncremento(int comidaIncremento) {\n        this.comidaIncremento = comidaIncremento;\n    }\n\n    public int getComidaFinal() {\n        return comidaFinal;\n    }\n\n    public void setComidaFinal(int comidaFinal) {\n        this.comidaFinal = comidaFinal;\n    }\n}\n\nclass CultivoDeBacterias implements Serializable {\n    private String nombre;\n    private LocalDate fechaInicio;\n    private LocalDate fechaFin;\n    private int cantidad;\n    private double temperatura;\n    private String luminosidad;\n    private DosisComida dosisComida;\n\n    public CultivoDeBacterias(String nombre, LocalDate fechaInicio, LocalDate fechaFin, int cantidad,\n                              double temperatura, String luminosidad, DosisComida dosisComida) {\n        this.nombre = nombre;\n        this.fechaInicio = fechaInicio;\n        this.fechaFin = fechaFin;\n        this.cantidad = cantidad;\n        this.temperatura = temperatura;\n        this.luminosidad = luminosidad;\n        this.dosisComida = dosisComida;\n    }\n\n    public String getNombre() {\n        return nombre;\n    }\n\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n\n    public LocalDate getFechaInicio() {\n        return fechaInicio;\n    }\n\n    public void setFechaInicio(LocalDate fechaInicio) {\n        this.fechaInicio = fechaInicio;\n    }\n\n    public LocalDate getFechaFin() {\n        return fechaFin;\n    }\n\n    public void setFechaFin(LocalDate fechaFin) {\n        this.fechaFin = fechaFin;\n    }\n\n    public int getCantidad() {\n        return cantidad;\n    }\n\n    public void setCantidad(int cantidad) {\n        this.cantidad = cantidad;\n    }\n\n    public double getTemperatura() {\n        return temperatura;\n    }\n\n    public void setTemperatura(double temperatura) {\n        this.temperatura = temperatura;\n    }\n\n    public String getLuminosidad() {\n        return luminosidad;\n    }\n\n    public void setLuminosidad(String luminosidad) {\n        this.luminosidad = luminosidad;\n    }\n\n    public DosisComida getDosisComida() {\n        return dosisComida;\n    }\n\n    public void setDosisComida(DosisComida dosisComida) {\n        this.dosisComida = dosisComida;\n    }\n}\n\nclass experimentos {\n    public void agregarCultivoDeBacterias(CultivoDeBacterias cultivo) {\n        // Implementación de agregar cultivo\n    }\n\n    public void eliminarCultivoDeBacterias(CultivoDeBacterias cultivo) {\n        // Implementación de eliminar cultivo\n    }\n\n    public Optional<CultivoDeBacterias> obtenerDetallesCultivo(String nombre) {\n        // Implementación de obtener detalles del cultivo\n        return Optional.empty();\n    }\n\n    public void mostrarCultivosDeBacterias() {\n        // Implementación de mostrar cultivos\n    }\n\n    public static experimentos abrirExperimento(String ruta) throws IOException, ClassNotFoundException {\n        // Implementación de abrir experimento\n        return new experimentos();\n    }\n\n    public void guardarExperimento(String ruta) throws IOException {\n        // Implementación de guardar experimento\n    }\n}\n
===================================================================
diff --git a/src/main/java/EXPERIMENTO/MAIN.java b/src/main/java/EXPERIMENTO/MAIN.java
--- a/src/main/java/EXPERIMENTO/MAIN.java	
+++ b/src/main/java/EXPERIMENTO/MAIN.java	
@@ -40,6 +40,7 @@
     public JLabel comidaIncrementoLabel;
     public JLabel comidaFinalLabel;
     public experimentos experimento;
+    private int cantidad;
 
     public MAIN() {
         setTitle("Experimento con bacterias");
@@ -173,6 +174,11 @@
         }
     }
 
+    public void simularCrecimiento(double tasaCrecimiento) {
+        this.cantidad = DetallesPoblacionBacterias.crecimientoBacterias(this.cantidad, tasaCrecimiento);
+    }
+
+
     public void guardarExperimento() throws IOException {
         String ruta = "experimento.ser";
         guardarExperimento(ruta);
@@ -242,6 +248,7 @@
         detallesArea.append("Cultivo de bacterias agregado: " + nombre + "\n");
     }
 
+
     public void setExperimento(experimentos experimento) {
         this.experimento = experimento;
     }
